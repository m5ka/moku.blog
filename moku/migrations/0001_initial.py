# ruff: noqa: E501
# Generated by Django 5.0.3 on 2024-03-24 17:24

import re

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models

import moku.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [("auth", "0012_alter_user_first_name_max_length")]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        help_text="this is the unique identifier you'll use to log in. it may only contain letters, numbers, hyphens, dashes and dots.",
                        max_length=64,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[a-zA-Z0-9-_.]+\\Z"),
                                "Username may only contain letters, numbers, hyphens, underscores and dots.",
                                "invalid",
                            ),
                            moku.validators.validate_username_length,
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="this should be your email address. make sure it's valid and that you have access to it.",
                        max_length=128,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                ("email_confirmed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "pronouns",
                    models.CharField(
                        blank=True,
                        help_text="what pronouns should people use when referring to you?",
                        max_length=64,
                        verbose_name="pronouns",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="where in the world are you?",
                        max_length=64,
                        verbose_name="location",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="write something about yourself!",
                        verbose_name="about me",
                    ),
                ),
                (
                    "last_seen_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="the last time this user accessed the site.",
                        null=True,
                        verbose_name="last seen at",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager())],
        )
    ]
